# SMART on FHIR Sandbox

A lightweight SMART on FHIR R4 sandbox built with Node.js, TypeScript, and Hono. The API serves static FHIR payloads stored in `data/r4/<patientId>` folders, making it easy to prototype SMART on FHIR integrations locally.

## Getting Started

```bash
npm install
npm run dev:server    # Start the Hono API (defaults to http://localhost:3000)
npm run dev           # Optional: start the placeholder Vite client on http://localhost:5173
```

### Configuration

| Variable             | Purpose                                             | Default                       |
|----------------------|-----------------------------------------------------|-------------------------------|
| `CORS_ALLOW_ORIGINS` | Comma-separated list of origins allowed via CORS.   | `*`
| `OIDC_ISSUER`        | External issuer URL reported by the OAuth provider. | `http://localhost:3000/oauth2`|
| `OIDC_COOKIE_KEY`    | Signing key for OIDC cookies.                       | `smart-sandbox-secret`

### Build & Test

```bash
npm run build         # Type-check + build server and client bundles
npm run lint          # ESLint + Prettier checks
npm test              # Vitest API coverage (OAuth flow test is skipped in the sandbox runtime)
```

## API Overview

All endpoints are namespaced under `/r4`:

- `GET /r4/Patient/:id` – fetch a single patient resource.
- `GET /r4/Observation?patient=<id>&category=<vital-signs|laboratory|social-history>` – retrieve category-scoped observations. The `patient` parameter accepts either `<id>` or `Patient/<id>` formats and the `category` parameter is required.
- `GET /r4/AllergyIntolerance?patient=<id>` – list allergy intolerances for a patient (accepts `<id>` or `Patient/<id>` formats).
- `GET /r4/MedicationRequest?patient=<id>` – list medication requests for a patient (accepts `<id>` or `Patient/<id>` formats).
- `GET /r4/metadata` – minimal FHIR CapabilityStatement advertising SMART on FHIR support (other FHIR releases return 404 until implemented).

Responses are served with the `application/fhir+json` content type and return OperationOutcome payloads on validation or data errors.

### SMART on FHIR Authorization

OAuth2 endpoints are mounted under `/oauth2` and implemented with [`oidc-provider`](https://github.com/panva/node-oidc-provider)`*`:

- `GET /oauth2/authorize`
- `POST /oauth2/token`

The sandbox auto-registers any `client_id` it sees, captures `redirect_uri` values on the fly, and accepts any client secret (it simply stores the value presented during the token request). Authorization requests now pause on a Tailwind-styled login and consent screen; use one of the seeded credentials in `data/auth/credentials.json` to continue the SMART flow. Visit `GET /oauth2/session` (served by the Node API) to trigger the same Tailwind experience for logging out, or call `POST /oauth2/logout` directly to clear the session before authenticating as another user. Refresh tokens are minted whenever `offline_access` is present; tokens live in the shared SQLite store via Drizzle and the `/oauth2/token` endpoint now honors `grant_type=refresh_token` for SMART-compliant re-issuance. The `/r4/metadata` response surfaces these endpoint URLs via the standard SMART extension.

`*` _Note:_ `oidc-provider` warns about development-only keys and the current Node runtime (the sandbox runs on Node 21) when executing locally; these warnings are expected for this mock environment.

## Data Layout

Static payloads live in `data/r4/<patientId>`; for example, patient `123456` includes:

```
patient.json
observation.vital-signs.json
observation.laboratory.json
observation.social-history.json
allergyintolerance.json
medicationrequest.json
```

Add new patients or resource types by dropping additional JSON files in the same structure.
